

            // let fft = false;
            // if fft{
            //     let modder = buffers.logspace_buffers.len();

            //     let (pad_raw, push_constants) = &buffers.raw_padded.1;
            //     pad_raw.execute(&mut encoder, bytemuck::cast_slice(push_constants));
    
            //     let fft_raw = &buffers.raw_padded.2;
            //     fft_raw.execute(&mut encoder, false, false);
    
            //     encoder.clear_buffer(&buffers.logspace_buffers[2].0, 0, None);
                
            //     let n_sigma = buffers.filter_buffers.len();
            //     let mut iterator = 0..n_sigma;
                
            //     let i = iterator.next().unwrap();
            //     let convolution = &buffers.logspace_buffers[i % modder].1[i];
            //     convolution.execute(&mut encoder, &[]);
                
            //     let ifft = &buffers.logspace_buffers[i % modder].2;
            //     ifft.execute(&mut encoder, true, true);
            //     let mut edge: i32 = -1;
                
            //     for i in iterator{
            //         let convolution = &buffers.logspace_buffers[i % modder].1[i];
            //         convolution.execute(&mut encoder, &[]);
                    
            //         let ifft = &buffers.logspace_buffers[i % modder].2;
            //         ifft.execute(&mut encoder, true, true);
                    
            //         let find_max = &state.passes["logspace_max"][(i-1) % 3];
            //         let sigma = sigmas[i-1];
            //         let push_constants_tuple = (edge, sigma);
            //         let push_constants = unsafe{ any_as_u8_slice(&push_constants_tuple) };
            //         find_max.execute(&mut encoder, push_constants);
                    
            //         // let walk = &state.passes["walk"][(i-1) % 3];
            //         // walk.execute(&mut encoder, &[]);
            //         // encoder.clear_buffer(&buffers.particles_buffer, 0, None);
            //         // encoder.clear_buffer(&buffers.atomic_buffer, 0, None);
                    
            //         edge = 0;
            //     }
    
                
            //     // encoder.clear_buffer(&buffers.logspace_buffers[n_sigma % modder].0, 0, None);
                
            //     edge = 1;
                
            //     let find_max = &state.passes["logspace_max"][(n_sigma - 1) % modder];
            //     let sigma = sigmas[n_sigma - 1];
            //     let push_constants_tuple = (edge, sigma);
            //     let push_constants = unsafe{ any_as_u8_slice(&push_constants_tuple) };
            //     find_max.execute(&mut encoder, push_constants);
                
            //     encoder.copy_buffer_to_buffer(&buffers.global_max, 0, staging_buffer, 4+state.pic_byte_size, 4);
            //     encoder.clear_buffer(&buffers.global_max, 0, None);
            // } else {
                // encoder.clear_buffer(&buffers.logspace_buffers[2].0, 0, None);
